// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId Int    @id @default(autoincrement()) @map("category_id")
  name       String @default("")

  task Task[]

  @@map("categories")
}

// model City {
//   cityId Int    @id @default(autoincrement()) @map("city_id")
//   name   String @default("")

//   task Task[]

//   @@map("cites")
// }

model Tag {
  tagId Int    @id @default(autoincrement()) @map("tag_id")
  name  String

  task Task[]

  @@map("tags")
}

// model Status {
//   statusId Int    @id @default(autoincrement()) @map("status_id")
//   name     String

//   task Task[]

//   @@map("statuses")
// }

model Task {
  taskId     Int      @id @default(autoincrement()) @map("task_id")
  title      String   @default("")
  details    String   @default("")
  categoryId Int      @map("category_id")
  price      Int
  deadline   DateTime @default(now())
  image      String   @default("")
  address    String   @default("")
  city       String   @default("")
  status     String   @default("new")

  customerId String?
  executerId String?
  // statusId   Int     @map("status_id")

  createdAt DateTime @default(now())
  publishAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade)
  // city     City     @relation(fields: [cityId], references: [cityId])
  // status   Status   @relation(fields: [statusId], references: [statusId])

  tags     Tag[]
  comments Comment[]
  Review   Review?
  Respond  Respond?

  @@map("tasks")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  message   String
  userId    String   @map("user_id")
  taskId    Int      @map("task_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task Task @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)

  @@map("comments")
}

model Review {
  reviewId   Int    @id @default(autoincrement()) @map("review_id")
  taskId     Int    @unique @map("task_id")
  customerId String
  executerId String
  review     String @default("")
  evaluation Int

  task Task @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)

  @@map("reviews")
}

model Respond {
  respondId Int    @id @default(autoincrement()) @map("respond_id")
  taskId    Int    @unique @map("task_id")
  userId    String @map("user_id")

  task Task @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
}
